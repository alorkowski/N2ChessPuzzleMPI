#!/bin/bash

#SBATCH --account=updalpe
#SBATCH --job-name=mpi
#SBATCH --time=00:59:00
#SBATCH --nodes=4
#SBATCH --ntasks=64
#SBATCH --cpus-per-task=1

module load intel/16.0.3  intelmpi/5.1.3

######### Adjustable parameters #############
maxNumberOfQueens=12    # N number of NQueens
imax=10 # Maximum number of iterations
maxCPU=64   # Number of processes
#u="-u" # Flag to search for unique solutions
#p="-p" # Flag to reconstruct the game boards
######### End Adjustable parameters #########

n=11
serialCPU=0

awk 'BEGIN {printf("%15s %15s %15s %15s \n" , "NumberOfQueens", "NumberOfCPUs", "AverageTime", "StdDeviation")}' > runtime.txt

while [ $n -le $maxNumberOfQueens ];do
    cpuNumber=0
    while [ $cpuNumber -le $maxCPU ];do
	timeArray=()
	i=1
	while [ $i -le $imax ];do
	    if [  $cpuNumber -eq $serialCPU ];then
		time="$(srun -n 1 ./build/nqueen-serial -n $n $u $p | tail -1 | awk '{print $4}')"
		timeArray+=($time)
	    else
		time="$(srun -n $cpuNumber ./build/nqueen-mpi -n $n $u $p | tail -1 | awk '{print $4}')"
		timeArray+=($time)
	    fi
    
	    i=`expr $i + 1`
	done

	ave=$(
	    echo "$timeArray" | 
	    awk '{sum+=sprintf("%f",$1)}END{printf "%.6f\n", sum/NR }'
	)
	
	std=$(
	    echo "$timeArray" |
	    awk '{sum+=sprintf("%f",$1); sumsq+=sprintf("%f",$1)*sprintf("%f",$1)}END{printf "%.6f\n", sqrt(sumsq/NR - (sum/NR)**2)}'
	)

	if [  $cpuNumber -eq $serialCPU ];then
	    awk 'BEGIN {printf("%15i %15.8f %15.8f %15.8f \n" ,'$n', 1,'$ave','$std')}' >> runtime.txt
	else
	    awk 'BEGIN {printf("%15i %15.8f %15.8f %15.8f \n" ,'$n','$cpuNumber','$ave','$std')}' >> runtime.txt
	fi

	if [  $cpuNumber -eq $serialCPU ];then
	    cpuNumber=`expr $cpuNumber + 2`
	else
	    cpuNumber=`expr $cpuNumber + $cpuNumber`
	fi
    done
    n=`expr $n + 1`
done
    
